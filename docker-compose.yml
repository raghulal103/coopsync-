version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: cooperative-erp-postgres
    environment:
      POSTGRES_DB: cooperative_erp_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password123
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - erp-network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: cooperative-erp-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - erp-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: cooperative-erp-backend
    environment:
      NODE_ENV: development
      PORT: 5000
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: cooperative_erp_dev
      DB_USERNAME: postgres
      DB_PASSWORD: password123
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: your_super_secret_jwt_key_for_development
      JWT_EXPIRES_IN: 7d
      JWT_REFRESH_SECRET: your_refresh_secret_key_for_development
      JWT_REFRESH_EXPIRES_IN: 30d
    ports:
      - "5000:5000"
    depends_on:
      - postgres
      - redis
    networks:
      - erp-network
    restart: unless-stopped
    volumes:
      - ./backend:/app
      - /app/node_modules
      - ./backend/logs:/app/logs
      - ./backend/uploads:/app/uploads
    command: npm run dev

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: cooperative-erp-frontend
    environment:
      NODE_ENV: development
      REACT_APP_API_URL: http://localhost:5000/api/v1
      REACT_APP_TENANT_MODE: subdomain
      REACT_APP_COMPANY_NAME: Cooperative ERP
      REACT_APP_SUPPORT_EMAIL: support@cooperativeerp.com
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - erp-network
    restart: unless-stopped
    volumes:
      - ./frontend:/app
      - /app/node_modules
    command: npm start

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: cooperative-erp-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - erp-network
    restart: unless-stopped

  # Database Admin (Optional)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: cooperative-erp-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@cooperativeerp.com
      PGADMIN_DEFAULT_PASSWORD: admin123
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - erp-network
    restart: unless-stopped
    volumes:
      - pgadmin_data:/var/lib/pgadmin

  # Redis Admin (Optional)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: cooperative-erp-redis-commander
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - erp-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  erp-network:
    driver: bridge